from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import Utils
import aiogram.utils.markdown as fmt
from handlers.users import CurrentUser
from handlers.company import *
from handlers.texts import *
from handlers.marketing import *

CONFIG = Utils.load_env()


class StatesNewUser(StatesGroup):
    get_phone = State()


class StatesExistUser(StatesGroup):
    selection_menu = State()


# –≠—Ç–∞–ø—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ –≤–µ—Ç–∫–∏ "–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ"
class StatesChangeUserName(StatesGroup):
    save_name = State()


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start
async def bot_start(message: types.Message, state: FSMContext):
    if message.chat.username is None:
        username = ''
    else:
        username = message.chat.username
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = {
        "id_telegram": message.chat.id,
        "mention": message.chat.mention,
        "full_name": message.chat.full_name,
        "user_name": username,
        "phone": "",
        "company": CONFIG["ID_COMPANY"],
        "activity": True,
        "approval": False,
    }
    user = CurrentUser(id_telegram=message.chat.id, id_company=CONFIG["ID_COMPANY"])

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –æ–Ω —Å–æ–∑–¥–∞—Å—Ç—å—Å—è)
    if not user.find_user():
        # —Å–æ–∑–¥–∞–µ–º
        if not user.create_user(user_info):
            await message.answer(get_text_server_error())
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if user.phone == "" or not user.approval:
        await show_offer(message, state)
    else:
        await message.delete()
        await message.answer(get_text_menu_selection(), reply_markup=get_keyboard_main_menu(), parse_mode=types.ParseMode.HTML)


def get_keyboard_main_menu():
    buttons = [
        types.InlineKeyboardButton(text="üí∏ –°–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–æ–≤ üí∏", callback_data="bonuses"),
        types.InlineKeyboardButton(text="üíé –¢–µ–∫—É—â–∏–∏ –∞–∫—Ü–∏–∏ üíé", callback_data="promotions"),
        types.InlineKeyboardButton(text="üìá –°–º–µ–Ω–∏—Ç—å –∏–º—è üìá", callback_data="change_name"),
        types.InlineKeyboardButton(text="üîå –û—Ç–º–µ–Ω–∞ üîå", callback_data="cancel")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


async def show_offer(message: types.Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
    company_params = ConfigData().get_params()
    # –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –ø–æ–ª—É—á–∞–µ–º –ø–æ –∫–ª—é—á—É —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
    offer = company_params.get('offer')
    if not offer:
        await message.delete()
        await message.answer(get_text_server_error())
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –æ–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 2 –∫–æ–º–∞–Ω–¥—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ - get_phone())
        for name in ["–ü—Ä–∏–Ω–∏–º–∞—é", "–ù–µ –ø—Ä–∏–Ω–∏–º–∞—é"]:
            keyboard.add(name)
        text = get_text_consent_processing_of_personal_data(offer)
        await message.answer(text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
        await StatesNewUser.get_phone.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def get_phone(message: types.Message, state: FSMContext):
    if message.text == "–ü—Ä–∏–Ω–∏–º–∞—é":
        selection_options = ["–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞"]
        keyboard_type = 'request_contact'
        keyboard = create_keyboard(selection_options, keyboard_type=keyboard_type)
        await message.delete()
        await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=keyboard)
        await state.finish()
    elif message.text == "–ù–µ –ø—Ä–∏–Ω–∏–º–∞—é":
        await message.delete()
        await message.answer("–†–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()


async def save_phone(message: types.Message, state: FSMContext):
    user = CurrentUser(id_telegram=message.contact.user_id, id_company=CONFIG["ID_COMPANY"])
    if not user.find_user():
        text = get_text_server_error()
    else:
        user.phone = message.contact.phone_number
        user.approval = True
        if user.update_user():
            text = get_text_save_phone_answer(True)
        else:
            text = get_text_save_phone_answer(False)
    await message.delete()
    await message.answer(text, reply_markup=types.ReplyKeyboardRemove())


# —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
def create_keyboard(values, keyboard_type=None):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if keyboard_type == 'request_location':
        return keyboard.add(types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π üó∫Ô∏è", request_location=True))
    elif keyboard_type == 'request_contact':
        return keyboard.add(types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º ‚òé", request_contact=True))
    elif keyboard_type == 'request_poll':
        return keyboard.add(types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É",
                                                 request_poll=types.KeyboardButtonPollType(type=types.PollType.QUIZ)))
    else:
        for val in values:
            keyboard.add(val)
        return keyboard


# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
def location_buttons_in_row(values, keyboard: types.ReplyKeyboardMarkup):
    conf = {
        "max_val_in_row": 6,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫–µ
        'fill_empty': True  # –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã —Å–µ—Ç–∫–∏
    }
    # —Å—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –≤—ã–≤–æ–¥–∞ –¥–∞—Ç
    if len(values) % conf['max_val_in_row'] == 0:
        num_rows = len(values) // conf['max_val_in_row']
    else:
        num_rows = len(values) // conf['max_val_in_row'] + 1

    # —Å—á–∏—Ç–∞–µ–º,—Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å
    if conf['fill_empty']:
        num_total_buttons = num_rows * conf['max_val_in_row']
    else:
        num_total_buttons = len(values)

    stop_process = False
    buttons = []
    current_num_button = 1
    current_col = 1

    # –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É –∫–Ω–æ–ø–æ–∫
    while current_num_button <= num_total_buttons:
        # –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã —Å–ø–∏—Å–∫–∞
        if current_num_button > len(values):
            buttons.append(types.KeyboardButton(' '))
        else:
            buttons.append(types.KeyboardButton(values[current_num_button - 1]))

        # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        if current_col == conf['max_val_in_row'] or (not conf['fill_empty'] and current_num_button == len(values)):
            keyboard.row(*buttons)
            buttons = []
            current_col = 1
        else:
            current_col += 1

        current_num_button += 1

    f = 0
    return keyboard


async def inline_interceptor(callback: types.CallbackQuery, state: FSMContext):
    user = CurrentUser(id_telegram=callback.from_user.id, id_company=CONFIG["ID_COMPANY"])
    if not user.find_user():
        await callback.message.edit_text(get_text_server_error(), reply_markup=None)
        await callback.answer()
        return
    full_name_db = str(user.full_name)
    command_name = callback.values['data'].lower()
    if command_name == "bonuses":
        message_text = get_bonuses_info(user)
    elif command_name == "promotions":
        message_text = get_promotions_info(user)
    elif command_name == "change_name":
        message_text = get_text_change_user_name(full_name_db)
        await state.update_data(current_user=user)
        await StatesChangeUserName.save_name.set()
        await callback.message.edit_text("-"*10, reply_markup=None)
        await callback.message.answer(message_text)
        await callback.answer(message_text)
        return
    elif command_name == "cancel":
        await callback.message.edit_text("-"*10, reply_markup=None)
        await callback.message.answer(get_text_command_cancel())
        await callback.answer()
        return
    else:
        message_text = "-–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞-"
    await callback.message.answer(message_text, parse_mode=types.ParseMode.HTML)
    await callback.answer()


def get_bonuses_info(user):
    bonus_info = Bonus()
    bonus_info.user = user.id_db
    if not bonus_info.get_balance():
        return  get_text_no_data_on_bonuses(user.full_name)

    amount = bonus_info.quantity
    if not amount:
        return get_text_no_data_on_bonuses(user.full_name)

    else:
        return get_text_on_amount_bonuses(user.full_name, amount)


def get_promotions_info(user):
    promotions = Promotions()
    promotions.company = user.company
    if not promotions.get_data():
        return get_text_no_promotions(user.full_name)
    else:
        if promotions.data:
            return get_text_for_promotions(user.full_name, promotions.data['result'])
        else:
            return get_text_no_promotions(user.full_name)


async def save_user_name(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user = user_data.get("current_user")
    if user:
        if len(message.text) < 4:
            message_text = get_text_handler_save_name(full_name=user.full_name, success=True)
            await message.answer(message_text)
            await StatesChangeUserName.save_name.set()
            return
        user.full_name = message.text
        if user.update_user():
            message_text = get_text_handler_save_name(full_name=user.full_name, success=False)
            await message.answer(message_text)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")
        await state.finish()
    else:
        await message.answer(get_text_server_error())
        await state.finish()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(bot_start, commands="start", state="*")
    dp.register_message_handler(get_phone, state=StatesNewUser.get_phone)
    dp.register_message_handler(save_user_name, state=StatesChangeUserName.save_name)
    dp.register_message_handler(save_phone, content_types=types.ContentType.CONTACT)
    dp.register_callback_query_handler(inline_interceptor)

